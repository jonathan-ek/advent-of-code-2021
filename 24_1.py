# inp w
# mul x 0 {w: [0], x: 0, y: 0, z: 0 }
# add x z
# mod x 26
# div z 1
# add x 12 {w: [0], x: 12, y: 0, z: 0 }
# eql x w {w: [0], x: 0, y: 0, z: 0 }
# eql x 0 {w: [0], x: 1, y: 0, z: 0 }
# mul y 0
# add y 25 {w: [0], x: 1, y: 25, z: 0 }
# mul y x {w: [0], x: 1, y: 25, z: 0 }
# add y 1 {w: [0], x: 1, y: 26, z: 0 }
# mul z y
# mul y 0  {w: [0], x: 1, y: 0, z: 0 }
# add y w {w: [0], x: 1, y: [0], z: 0 }
# add y 4 {w: [0], x: 1, y: [0]+4, z: 0 }
# mul y x {w: [0], x: 1, y: [0]+4, z: 0 }
# add z y {w: [0], x: 1, y: [0]+4, z: [0]+4 }
# inp w {w: [1], x: 1, y: [0]+4, z: [0]+4 }
# mul x 0 {w: [1], x: 0, y: [0]+4, z: [0]+4 }
# add x z {w: [1], x: [0]+4, y: [0]+4, z: [0]+4 }
# mod x 26 {w: [1], x: [0]+4, y: [0]+4, z: [0]+4 }
# div z 1 {w: [1], x: [0]+4, y: [0]+4, z: [0]+4 }
# add x 11 {w: [1], x: [0]+15, y: [0]+4, z: [0]+4 }
# eql x w {w: [1], x: 0, y: [0]+4, z: [0]+4 }
# eql x 0 {w: [1], x: 1, y: [0]+4, z: [0]+4 }
# mul y 0 {w: [1], x: 1, y: 0, z: [0]+4 }
# add y 25 {w: [1], x: 1, y: 25, z: [0]+4 }
# mul y x {w: [1], x: 1, y: 25, z: [0]+4 }
# add y 1 {w: [1], x: 1, y: 26, z: [0]+4 }
# mul z y {w: [1], x: 1, y: 26, z: ([0]+4)*26 }
# mul y 0 {w: [1], x: 1, y: 0, z: ([0]+4)*26 }
# add y w {w: [1], x: 1, y: [1], z: ([0]+4)*26 }
# add y 11 {w: [1], x: 1, y: [1]+11, z: ([0]+4)*26 }
# mul y x {w: [1], x: 1, y: [1]+11, z: ([0]+4)*26 }
# add z y {w: [1], x: 1, y: [1]+11, z: (([0]+4)*26)+([1]+11) }
# inp w {w: [2], x: 1, y: [1]+11, z: (([0]+4)*26)+([1]+11) }
# mul x 0 {w: [2], x: 0, y: [1]+11, z: (([0]+4)*26)+([1]+11) }
# add x z {w: [2], x: (([0]+4)*26)+([1]+11), y: [1]+11, z: (([0]+4)*26)+([1]+11) }
# mod x 26 {w: [2], x: [1]+11, y: [1]+11, z: ([0]*26+[1]+115) }
# div z 1 {w: [2], x: [1]+11, y: [1]+11, z: ([0]*26+[1]+115) }
# add x 13 {w: [2], x: [1]+24, y: [1]+11, z: ([0]*26+[1]+115) }
# eql x w {w: [2], x: 0, y: [1]+11, z: ([0]*26+[1]+115) }
# eql x 0 {w: [2], x: 1, y: [1]+11, z: ([0]*26+[1]+115) }
# mul y 0 {w: [2], x: 1, y: 0, z: ([0]*26+[1]+115) }
# add y 25 {w: [2], x: 1, y: 25, z: ([0]*26+[1]+115) }
# mul y x {w: [2], x: 1, y: 25, z: ([0]*26+[1]+115) }
# add y 1 {w: [2], x: 1, y: 26, z: ([0]*26+[1]+115) }
# mul z y {w: [2], x: 1, y: 26, z: ([0]*26*26 + [1]*26 + 115*26) }
# mul y 0 {w: [2], x: 1, y: 0, z: ([0]*26*26 + [1]*26 + 115*26) }
# add y w {w: [2], x: 1, y: [2], z: ([0]*26*26 + [1]*26 + 115*26) }
# add y 5 {w: [2], x: 1, y: [2]+5, z: ([0]*26*26 + [1]*26 + 115*26) }
# mul y x {w: [2], x: 1, y: [2]+5, z: ([0]*26*26 + [1]*26 + 115*26) }
# add z y {w: [2], x: 1, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# inp w {w: [3], x: 1, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# mul x 0 {w: [3], x: 0, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# add x z {w: [3], x: [0]*26*26 + [1]*26 + [2] + 115*26 +5, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# mod x 26 {w: [3], x: [2]+5, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# div z 1 {w: [3], x: [2]+5, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# add x 11 {w: [3], x: [2]+16, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# eql x w {w: [3], x: 0, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# eql x 0 {w: [3], x: 1, y: [2]+5, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# mul y 0 {w: [3], x: 1, y: 0, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# add y 25 {w: [3], x: 1, y: 25, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# mul y x {w: [3], x: 1, y: 25, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# add y 1 {w: [3], x: 1, y: 26, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5 }
# mul z y {w: [3], x: 1, y: 26, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + 2995*26 }
# mul y 0 {w: [3], x: 1, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + 2995*26 }
# add y w  {w: [3], x: 1, y: [3], z: [0]*26*26*26 + [1]*26*26 + [2]*26 + 2995*26 }
# add y 11  {w: [3], x: 1, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + 2995*26 }
# mul y x   {w: [3], x: 1, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + 2995*26 }
# add z y  {w: [3], x: 1, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# inp w {w: [4], x: 1, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# mul x 0  {w: [4], x: 0, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# add x z  {w: [4], x: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# mod x 26  {w: [4], x: [3] + 11, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# div z 1 {w: [4], x: [3] + 11, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# add x 14 {w: [4], x: [3] + 25, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# eql x w  {w: [4], x: 0, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# eql x 0 {w: [4], x: 1, y: [3] + 11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# mul y 0 {w: [4], x: 1, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# add y 25 {w: [4], x: 1, y: 25, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# mul y x {w: [4], x: 1, y: 25, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# add y 1 {w: [4], x: 1, y: 26, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 2995*26 + 11 }
# mul z y  {w: [4], x: 1, y: 26, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# mul y 0 {w: [4], x: 1, y: 0, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add y w  {w: [4], x: 1, y: [4], z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add y 14  {w: [4], x: 1, y: [4] + 14, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# mul y x {w: [4], x: 1, y: [4] + 14, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add z y  {w: [4], x: 1, y: [4] + 14, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + [4] + 77881*26 + 14 }
# inp w {w: [5], x: 1, y: [4] + 14, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + [4] + 77881*26 + 14 }
# mul x 0  {w: [5], x: 0, y: [4] + 14, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + [4] + 77881*26 + 14 }
# add x z  {w: [5], x: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + [4] + 77881*26 + 14 , y: [4] + 14, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + [4] + 77881*26 + 14 }
# mod x 26  {w: [5], x:  [4] + 14 , y: [4] + 14, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + [4] + 77881*26 + 14 }
# div z 26 {w: [5], x: [4] + 14 , y: [4] + 14, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add x -10 {w: [5], x: [4] + 4 , y: [4] + 14, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# eql x w [5]==([4] + 4) {w: [5], x: 1 , y: [4] + 14, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 0 , y: [4] + 14, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# eql x 0  [5]==([4] + 4) {w: [5], x: 0 , y: [4] + 14, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: [4] + 14, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul y 0  [5]==([4] + 4) {w: [5], x: 0 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add y 25 [5]==([4] + 4) {w: [5], x: 0 , y: 25, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: 25, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul y x  [5]==([4] + 4) {w: [5], x: 0 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: 25, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add y 1  [5]==([4] + 4) {w: [5], x: 0 , y: 1, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: 26, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul z y  [5]==([4] + 4) {w: [5], x: 0 , y: 1, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: 26, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# mul y 0  [5]==([4] + 4) {w: [5], x: 0 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: 0, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add y w [5]==([4] + 4) {w: [5], x: 0 , y: [5], z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: [5], z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add y 7 [5]==([4] + 4) {w: [5], x: 0 , y: [5] + 7, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  [5]!=([4] + 4) {w: [5], x: 1 , y: [5] + 7, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# mul y x [5]==([4] + 4) {w: [5], x: 0 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }  // [5]!=([4] + 4) {w: [5], x: 1 , y: [5] + 7, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add z y [5]==([4] + 4) {w: [5], x: 0 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# inp w [5]==([4] + 4) {w: [6], x: 0 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul x 0 [5]==([4] + 4) {w: [6], x: 0 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add x z [5]==([4] + 4) {w: [6], x: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mod x 26 [5]==([4] + 4) {w: [6], x: [3] + 11 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# div z 1  [5]==([4] + 4) {w: [6], x: [3] + 11 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add x 11  [5]==([4] + 4) {w: [6], x: [3] + 22 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# eql x w [5]==([4] + 4) {w: [6], x: 0 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# eql x 0 [5]==([4] + 4) {w: [6], x: 1 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul y 0 [5]==([4] + 4) {w: [6], x: 1 , y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add y 25  [5]==([4] + 4) {w: [6], x: 1 , y: 25, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul y x [5]==([4] + 4) {w: [6], x: 1 , y: 25, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add y 1 [5]==([4] + 4) {w: [6], x: 1 , y: 26, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul z y [5]==([4] + 4) {w: [6], x: 1 , y: 26, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# mul y 0 [5]==([4] + 4) {w: [6], x: 1 , y: 0, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add y w  [5]==([4] + 4) {w: [6], x: 1 , y: [6], z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add y 11  [5]==([4] + 4) {w: [6], x: 1 , y: [6]+11, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# mul y x  [5]==([4] + 4) {w: [6], x: 1 , y: [6]+11, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 }
# add z y  [5]==([4] + 4) {w: [6], x: 1 , y: [6]+11, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 + [6]+11 }
# inp w  [5]==([4] + 4) {w: [7], x: 1 , y: [6]+11, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 + [6]+11 }
# mul x 0 [5]==([4] + 4) {w: [7], x: 0 , y: [6]+11, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 + [6]+11 }
# add x z  [5]==([4] + 4) {w: [7], x: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 + [6]+11 , y: [6]+11, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 + [6]+11 }
# mod x 26 [5]==([4] + 4) {w: [7], x: [6]+11 , y: [6]+11, z: [0]*26*26*26*26 + [1]*26*26*26 + [2]*26*26 + [3]*26 + 77881*26 + [6]+11 }
# div z 26 [5]==([4] + 4) {w: [7], x: [6]+11 , y: [6]+11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add x -9 [5]==([4] + 4) {w: [7], x: [6]+2 , y: [6]+11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# eql x w [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 1, y: [6]+11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881} [5]==([4] + 4) && [7]!=([6]+2) {w: [7], x: 0, y: [6]+11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# eql x 0 [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: [6]+11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881} [5]==([4] + 4) && [7]!=([6]+2) {w: [7], x: 1, y: [6]+11, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul y 0 [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881} [5]==([4] + 4) && [7]!=([6]+2) {w: [7], x: 1, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# add y 25
# mul y x
# add y 1  [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: 1, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881} [5]==([4] + 4) && [7]!=([6]+2) {w: [7], x: 1, y:26, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881 }
# mul z y [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: 1, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# mul y 0 [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# add y w [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: [7], z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# add y 4 [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: [7] + 4, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# mul y x [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# add z y [5]==([4] + 4) && [7]==([6]+2) {w: [7], x: 0, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# inp w [5]==([4] + 4) && [7]==([6]+2) {w: [8], x: 0, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# mul x 0 [5]==([4] + 4) && [7]==([6]+2) {w: [8], x: 0, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# add x z [5]==([4] + 4) && [7]==([6]+2) {w: [8], x: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# mod x 26  [5]==([4] + 4) && [7]==([6]+2) {w: [8], x: [3] + 11, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + [3] + 77881}
# div z 26  [5]==([4] + 4) && [7]==([6]+2) {w: [8], x: [3] + 11, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# add x -3  [5]==([4] + 4) && [7]==([6]+2) {w: [8], x: [3] + 8, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# eql x w [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 1, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}, [5]==([4] + 4) && [7]==([6]+2) && [8]!=([3] + 8) {w: [8], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# eql x 0 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}, [5]==([4] + 4) && [7]==([6]+2) && [8]!=([3] + 8) {w: [8], x: 1, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# mul y 0 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}, [5]==([4] + 4) && [7]==([6]+2) && [8]!=([3] + 8) {w: [8], x: 1, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# add y 25  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 25, z: [0]*26*26 + [1]*26 + [2] + 2995}, [5]==([4] + 4) && [7]==([6]+2) && [8]!=([3] + 8) {w: [8], x: 1, y: 25, z: [0]*26*26 + [1]*26 + [2] + 2995}
# mul y x  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}, [5]==([4] + 4) && [7]==([6]+2) && [8]!=([3] + 8) {w: [8], x: 1, y: 25, z: [0]*26*26 + [1]*26 + [2] + 2995}
# add y 1  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 1, z: [0]*26*26 + [1]*26 + [2] + 2995}, [5]==([4] + 4) && [7]==([6]+2) && [8]!=([3] + 8) {w: [8], x: 1, y: 26, z: [0]*26*26 + [1]*26 + [2] + 2995}
# mul z y  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 1, z: [0]*26*26 + [1]*26 + [2] + 2995}
# mul y 0  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# add y w  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: [8], z: [0]*26*26 + [1]*26 + [2] + 2995}
# add y 6  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: [8] + 6, z: [0]*26*26 + [1]*26 + [2] + 2995}
# mul y x  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# add z y [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [8], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# inp w  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# mul x 0
# add x z [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: [0]*26*26 + [1]*26 + [2] + 2995, y: 0, z: [0]*26*26 + [1]*26 + [2] + 2995}
# mod x 26  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: [2]+5, y: 0, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5}
# div z 1  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: [2]+5, y: 0, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5}
# add x 13
# eql x w  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5}
# eql x 0  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 1, y: 0, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5}
# mul y 0
# add y 25 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 1, y: 25, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5}
# mul y x
# add y 1 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 1, y: 26, z: [0]*26*26 + [1]*26 + [2] + 115*26 +5}
# mul z y  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 1, y: 26, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26}
# mul y 0   [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 1, y: 0, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26}
# add y w [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 1, y: [9], z: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26}
# add y 5 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 1, y: [9] + 5, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26}
# mul y x
# add z y  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [9], x: 1, y: [9] + 5, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26 + [9] + 5}
# inp w   [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [10], x: 1, y: [9] + 5, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26 + [9] + 5}
# mul x 0
# add x z [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [10], x: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26 + [9] + 5, y: [9] + 5, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26 + [9] + 5}
# mod x 26  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [10], x: [9] + 5, y: [9] + 5, z: [0]*26*26*26 + [1]*26*26 + [2]*26 + (115*26 +5)*26 + [9] + 5}
# div z 26  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [10], x: [9] + 5, y: [9] + 5, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# add x -5  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) {w: [10], x: [9], y: [9] + 5, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# eql x w  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [10], x: 1, y: [9] + 5, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# eql x 0  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [10], x: 0, y: [9] + 5, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# mul y 0   [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [10], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# add y 25
# mul y x
# add y 1  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [10], x: 0, y: 1, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# mul z y
# mul y 0  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [10], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# add y w  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [10], x: 0, y: [10], z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# add y 9
# mul y x
# add z y [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [10], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# inp w   [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [11], x: 0, y: 0, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# mul x 0
# add x z  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [11], x: [0]*26*26 + [1]*26 + [2] + (115*26 +5), y: 0, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# mod x 26 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [11], x: [2] + 5, y: 0, z: [0]*26*26 + [1]*26 + [2] + (115*26 +5)}
# div z 26 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [11], x: [2] + 5, y: 0, z: [0]*26 + [1] + 115 }
# add x -10  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] {w: [11], x: [2] - 5, y: 0, z: [0]*26 + [1] + 115 }
# eql x w [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [11], x: 1, y: 0, z: [0]*26 + [1] + 115 }
# eql x 0 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [11], x: 0, y: 0, z: [0]*26 + [1] + 115 }
# mul y 0
# add y 25
# mul y x
# add y 1
# mul z y
# mul y 0 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [11], x: 0, y: 0, z: [0]*26 + [1] + 115 }
# add y w
# add y 12
# mul y x
# add z y [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [11], x: 0, y: 0, z: [0]*26 + [1] + 115 }
# inp w  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [12], x: 0, y: 0, z: [0]*26 + [1] + 115 }
# mul x 0
# add x z  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [12], x: [0]*26 + [1] + 115, y: 0, z: [0]*26 + [1] + 115 }
# mod x 26 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [12], x: [1] + 11, y: 0, z: [0]*26 + [1] + 4*26+11 }
# div z 26 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [12], x: [1] + 11, y: 0, z: [0] + 4 }
# add x -4 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 {w: [12], x: [1] + 7, y: 0, z: [0] + 4 }
# eql x w [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [12], x: 1, y: 0, z: [0] + 4 }
# eql x 0 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [12], x: 0, y: 0, z: [0] + 4 }
# mul y 0
# add y 25
# mul y x
# add y 1
# mul z y
# mul y 0  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [12], x: 0, y: 0, z: [0] + 4 }
# add y w
# add y 14
# mul y x
# add z y  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [12], x: 0, y: 0, z: [0] + 4 }
# inp w  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [13], x: 0, y: 0, z: [0] + 4 }
# mul x 0
# add x z  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [13], x: [0] + 4, y: 0, z: [0] + 4 }
# mod x 26   [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [13], x: [0] + 4, y: 0, z: [0] + 4 }
# div z 26   [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [13], x: [0] + 4, y: 0, z: 0 }
# add x -5  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 {w: [13], x: [0] -1, y: 0, z: 0 }
# eql x w [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 && [13]==[0] - 1 {w: [13], x: 1, y: 0, z: 0 }
# eql x 0 [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 && [13]==[0] - 1 {w: [13], x: 0, y: 0, z: 0 }
# mul y 0
# add y 25
# mul y x
# add y 1
# mul z y
# mul y 0
# add y w
# add y 14
# mul y x
# add z y  [5]==([4] + 4) && [7]==([6]+2) && [8]==([3] + 8) && [10]==[9] && [11]==[2] - 5 && [12]==[1] + 7 && [13]==[0] - 1 {w: [13], x: 0, y: 0, z: 0 }

# [5]==([4] + 4)  = [5] == 9  [4] == 5    |   [5] == 5  [4] == 1
# [7]==([6]+2)    = [6] == 7  [7] == 9    |   [6] == 1  [7] == 3
# [8]==([3] + 8)  = [3] == 1  [8] == 9    |   [3] == 1  [8] == 9
# [10]==[9]       = [9] == 9  [10] == 9   |   [9] == 1  [10] == 1
# [11] + 5==[2]   = [2] == 9  [11] == 4   |   [2] == 6  [11] == 1
# [12]==[1] + 7   = [1] == 2  [12] == 9   |   [1] == 1  [12] == 8
# [13]==[0] - 1   = [0] == 9  [13] == 8   |   [0] == 2  [13] == 1

def main():
    with open('input/24.txt', 'r') as fp:
        instructions = [x.strip().split(' ') for x in fp.readlines()]
        # number = "92915979999498"
        number = "21611513911181"
        i = 0
        cache = dict()
        while True:
            memory = {
                'w': 0,
                'x': 0,
                'y': 0,
                'z': 0,
            }
            i += 1
            inp = [x for x in number]
            used_inp = []
            ins = 0
            while True:
                instruction = instructions[ins]
                ins += 1
                func = instruction[0]
                if func == 'inp':
                    if len(used_inp) and tuple(used_inp) not in cache:
                        cache[tuple(used_inp)] = dict(**memory)
                    inp_int = int(inp.pop(0))
                    used_inp.append(inp_int)
                    if tuple(used_inp) in cache:
                        memory = dict(**(cache[tuple(used_inp)]))
                        while ins < len(instructions) and instructions[ins][0] != 'inp':
                            ins += 1
                        continue
                    memory[instruction[1]] = inp_int
                else:
                    try:
                        value = int(memory[instruction[2]])
                    except KeyError:
                        value = int(instruction[2])
                    if func == 'mul':
                        memory[instruction[1]] = memory[instruction[1]] * value
                    elif func == 'add':
                        memory[instruction[1]] = memory[instruction[1]] + value
                    elif func == 'div':
                        memory[instruction[1]] = int(memory[instruction[1]] / value)
                    elif func == 'mod':
                        memory[instruction[1]] = memory[instruction[1]] % value
                    elif func == 'eql':
                        memory[instruction[1]] = 1 if memory[instruction[1]] == value else 0
                if ins == len(instructions):
                    break
            print(memory)
            return
            # if memory['z'] == 0:
            #     print(number)
            #     return
            # else:
            #     number = int(number) + 1
            #     while '0' in str(number):
            #         number = int(number) + 1
            #     number = str(number)
            #     if i % 1000 == 0:
            #         print(number)


if __name__ == '__main__':
    main()
